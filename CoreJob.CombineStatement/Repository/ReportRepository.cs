using CoreJob.CombineStatement.Models;
using CoreJob.Library.Data;

using Dapper;

using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace CoreJob.CombineStatement.Repository
{
	public class ReportRepository
	{
		public int CountBySmtpStatus(string period, SmtpDeliveryStatus status)
		{
			var sql = new StringBuilder("SELECT count(1) FROM Tbl_Recipient2 WHERE Period_Name = @period AND ");

			switch (status)
			{
				case SmtpDeliveryStatus.Delivered:
					sql.Append("Status_Code=101 AND (StatusSMTPId=1 OR StatusSMTPId IS NULL)");
					break;
				case SmtpDeliveryStatus.Bounced:
					sql.Append("Status_Code=101 AND StatusSMTPId=2");
					break;
				case SmtpDeliveryStatus.Deferred:
					sql.Append("((Status_Code=101 AND StatusSMTPId=3) OR Status_Code=102)");
					break;
				case SmtpDeliveryStatus.Quarantined:
					sql.Append("Status_Code=101 AND StatusSMTPId=4");
					break;
				case SmtpDeliveryStatus.Failed:
					sql.Append("Status_Code=103 AND StatusSMTPId IS NULL");
					break;
				default:
					sql.Append("1=1");
					break;
			}

			using var db = ConnectionFactory.Open();

			return db.QueryFirstOrDefault<int>(sql.ToString(), new { period });
		}

		public void AddSummary(string period, SmtpDeliveryStatus status, int count)
		{
			using var db = ConnectionFactory.Open();
			var sql = @"INSERT INTO Tbl_Dashboard(
						[CreatedTime],[CreatedBy_Id],[CreatedBy_Name],
						[StartDate],[EndDate],[Period],[Type],
						[Status_Code],[Status_Name], [Total]) 
					VALUES(getdate(), 0, 'System',
						@startDate, getdate(), @period, 2, 
						@status, @statusName, @count
					)";

			db.Execute(sql, new
			{
				startDate = DateTime.Now,
				period,
				status,
				statusName = status.ToString(),
				count
			});
		}

		public IEnumerable<StatusMapping> GetStatusMappings()
		{
			using var db = ConnectionFactory.Open();
			
			return db.Query<StatusMapping>(@"SELECT l1.Id as StatusId, l1.[Name] as StatusName, 
					l1.[Value] as StatusValue, 
					l1.OrderNo as StatusOrderNo,
					l2.Id as DetailStatusId, l2.[Name] as DetailStatusName, l2.[Value] as DetailStatusValue, l2.OrderNo as DetailStatusOrderNo
				FROM Lookup l1
				LEFT JOIN Lookup l2 
					ON l2.[Type]='StatusLogDetail' AND l1.[Value]=l2.[Value]
				WHERE l1.[Type]='StatusLogName'
				ORDER BY l1.id ASC");
		}

		public void ExportToExcel(string period, Stream stream)
		{
			var workbook = new XSSFWorkbook();

			WriteExcelData(period, workbook.CreateSheet("Success"), SuccessReportData(period));
			WriteExcelData(period, workbook.CreateSheet("Failed"), FailedReportData(period));
						

			workbook.Write(stream);
		}

		private void WriteExcelData(string period, ISheet sheet, IEnumerable<ExcelReportData> data)
		{
			var rowNum = 0;
			IRow row;

			sheet.CreateRow(rowNum++).CreateCell(1).SetCellValue("Report E-Statement");

			row = sheet.CreateRow(rowNum++);
			row.CreateCell(1).SetCellValue("Periode Pengiriman");
			row.CreateCell(3).SetCellValue(period);

			row = sheet.CreateRow(rowNum++);
			row.CreateCell(1).SetCellValue("Generated By");
			row.CreateCell(3).SetCellValue("System");

			rowNum = 4;
			row = sheet.CreateRow(rowNum++);
			row.CreateCell(1).SetCellValue("No");
			row.CreateCell(2).SetCellValue("Nama Nasabah");
			row.CreateCell(3).SetCellValue("Email");
			row.CreateCell(4).SetCellValue("Status");
			row.CreateCell(5).SetCellValue("Status Detail");
			row.CreateCell(6).SetCellValue("Status SMTP");
			row.CreateCell(7).SetCellValue("Timestamp");

			var rec = 0;
			foreach (var item in data)
			{
				row = sheet.CreateRow(rowNum++);
				row.CreateCell(1).SetCellValue(++rec);
				row.CreateCell(2).SetCellValue(item.Name);
				row.CreateCell(3).SetCellValue(item.Email);
				row.CreateCell(4).SetCellValue(item.StatusName);
				row.CreateCell(5).SetCellValue(item.Keterangan);
				row.CreateCell(6).SetCellValue(item.StatusSMTPName);
				row.CreateCell(7).SetCellValue(string.Format("{0}", item.Timestamp));
			}

			rowNum += 3;
			row = sheet.CreateRow(rowNum++);
			row.CreateCell(1).SetCellValue("Keterangan Log :");

			var legends = GetStatusMappings();
			foreach(var legend in legends)
			{
				row = sheet.CreateRow(rowNum++);
				row.CreateCell(1).SetCellValue(legend.StatusName);
				row.CreateCell(2).SetCellValue(legend.DetailStatusName);
			}

		}
		


		public IEnumerable<ExcelReportData> SuccessReportData(string period)
		{
			using var db = ConnectionFactory.Open();
			var sql = @"SELECT r.CIF,
						   LTRIM(RTRIM( r.[Name])) Name,
						   r.Email,
						   r.Status_Name StatusName,
						   (CASE 
								WHEN r.Status_Code = 102 THEN 'Don''t Have Email / Invalid Email'
								WHEN r.Status_Code = 103 THEN 'PDF Not Found'
								ELSE r.Keterangan
							END) Keterangan,
						   r.StatusSMTP,
						   r.[Timestamp],
						   t.[Name] AS StatusSMTPName
					FROM   Tbl_Recipient2 r
					LEFT JOIN Lookup t
						ON t.[Type] = 'StatusLogName'
						AND t.[Value] = r.StatusSMTPId
					WHERE r.Period_Name = @period
						AND ( (r.Status_Code=101 AND r.StatusSMTPId=1)
							OR ( r.Status_Code=101 AND r.StatusSMTPId IS NULL) )";

			return db.Query<ExcelReportData>(sql, new { period });
		}

		public IEnumerable<ExcelReportData> FailedReportData(string period)
		{
			using var db = ConnectionFactory.Open();
			var sql = @"SELECT r.CIF,
						   LTRIM(RTRIM( r.[Name])) Name,
						   r.Email,
						   r.Status_Name StatusName,
						   (CASE 
								WHEN r.Status_Code = 102 THEN 'Don''t Have Email / Invalid Email'
								WHEN r.Status_Code = 103 THEN 'PDF Not Found'
								ELSE r.Keterangan
							END) Keterangan,
						   r.StatusSMTP,
						   r.[Timestamp],
						   t.[Name] AS StatusSMTPName
					FROM   Tbl_Recipient2 r
					LEFT JOIN Lookup t
						ON t.[Type] = 'StatusLogName'
						AND t.[Value] = r.StatusSMTPId
					WHERE r.Period_Name = @period
						AND ((r.Status_Code=101 AND r.StatusSMTPId IS NOT NULL AND r.StatusSMTPId != 1) 
							OR (r.Status_Code != 101))";

			return db.Query<ExcelReportData>(sql, new { period });
		}
	}
}
